buildscript {
    ext {
        kotlin_version = '1.3.61'
        serialization_version = '0.13.0'
        ktor_version = '1.2.6'
        gradle_plugin = '3.5.2'
        mockk_version = "1.9.3"
        kotlinx_coroutines_version = "1.3.3"
    }
    repositories {
        google()
        jcenter()
        maven { url "https://dl.bintray.com/kotlin/kotlinx" }
        maven { url "https://plugins.gradle.org/m2/" }
    }

    dependencies {
        classpath "com.android.tools.build:gradle:$gradle_plugin"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-serialization:$kotlin_version"
    }

}
plugins {
    id 'org.jetbrains.kotlin.multiplatform' version '1.3.60'
}
apply plugin: 'kotlinx-serialization'
repositories {
    mavenCentral()
    google()
    jcenter()
}
group 'com.example'
version '0.0.1'

apply plugin: 'maven-publish'

kotlin {
    jvm()
    // This is for iPhone emulator
    // Switch here to iosArm64 (or iosArm32) to build library for iPhone device
    iosX64("ios") {
        binaries {
            framework()
        }
    }
    sourceSets {
        commonMain {
            dependencies {
                implementation kotlin("stdlib-common")
                api "org.jetbrains.kotlinx:kotlinx-coroutines-core-common:$kotlinx_coroutines_version"
                api "com.google.code.gson:gson:2.8.6"
                api "io.ktor:ktor-client:$ktor_version"
                api "io.ktor:ktor-client-core:$ktor_version"
                api "io.ktor:ktor-client-json:$ktor_version"
                api "io.ktor:ktor-client-serialization:${ktor_version}"
                api "io.ktor:ktor-client-logging:${ktor_version}"
                api "org.jetbrains.kotlinx:kotlinx-serialization-runtime-common:$serialization_version"
            }
        }
        commonTest {
            dependencies {
                implementation kotlin('test-common')
                implementation kotlin('test-annotations-common')

                api("io.ktor:ktor-client-mock:${ktor_version}")
                implementation("io.mockk:mockk-common:${mockk_version}")
            }
        }
        jvmMain {
            dependencies {
                implementation kotlin('stdlib')
                api("org.jetbrains.kotlinx:kotlinx-coroutines-android:${kotlinx_coroutines_version}")

                api("io.ktor:ktor-client-android:${ktor_version}")
                api("io.ktor:ktor-client-core-jvm:${ktor_version}")
                api("io.ktor:ktor-client-json-jvm:${ktor_version}")
                api("io.ktor:ktor-client-logging-jvm:${ktor_version}")
                api("io.ktor:ktor-client-serialization-jvm:${ktor_version}")
                implementation "io.mockk:mockk:${mockk_version}"
            }
        }
        jvmTest {
            dependencies {
                implementation kotlin('test')
                implementation kotlin('test-junit')
                implementation group: 'org.slf4j', name: 'slf4j-nop', version: '1.7.29'
            }
        }
        iosMain {
            dependencies {
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-native:1.3.2-native-mt-1"

                implementation "io.ktor:ktor-client-ios:${ktor_version}"
                implementation "io.ktor:ktor-client-json-native:${ktor_version}"
                implementation "io.ktor:ktor-client-logging-native:${ktor_version}"
                implementation "io.ktor:ktor-client-serialization-native:${ktor_version}"
            }
        }
        iosTest {
        }
    }
}

task iosTest {
    def device = project.findProperty("iosDevice")?.toString() ?: "iPhone 8"
    dependsOn kotlin.targets.ios.binaries.getTest('DEBUG').linkTaskName
    group = JavaBasePlugin.VERIFICATION_GROUP
    description = "Runs tests for target 'ios' on an iOS simulator"

    doLast {
        def binary = kotlin.targets.ios.binaries.getTest('DEBUG').outputFile
        exec {
            commandLine 'xcrun', 'simctl', 'spawn', device, binary.absolutePath
        }
    }
}

configurations {
    compileClasspath
}